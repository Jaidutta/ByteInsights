@* Inject an instance into a view 
   In the controller we inject a service through Constructor injection
   while in the View we do so using @inject 
*@

@using ByteInsights.Services
@inject IImageService imageService

@model IEnumerable<ByteInsights.Models.Blog>

@{
    ViewData["Title"] = "Index";
}
 @* Used to pass data into _Layout. Another way to pass data other than from the Model *@
<h1>Index</h1>

@if(User.IsInRole("Administrator"))
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
    
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Created)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Updated)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ImageData)
            </th>
            
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var blog in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => blog.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => blog.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => blog.Created)
            </td>
            <td>
                @Html.DisplayFor(modelItem => blog.Updated)
            </td>
            <td>
                <img classs="img-fluid" width="200px" src="@imageService.DecodeImage(blog.ImageData, blog.ContentType)"/> 
               
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@blog.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@blog.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@blog.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

@* 
  DisplayNameFor --> Display the name of the property
  DisplayFor --> Displays the value 
  
*@